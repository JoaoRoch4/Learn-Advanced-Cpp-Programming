#pragma once

struct myMath {

	__forceinline constexpr static long double Pow(const long double &base, const int &exponent)noexcept{
	return (exponent == 0) ? 1 : (exponent > 0) ? base * Pow(base, exponent - 1) : 1 / Pow(base, -exponent);}

	__forceinline static constexpr long double sqrtNewtonRaphson(long double x,
		long double curr, long double prev)	noexcept{
		return curr == prev ? curr : sqrtNewtonRaphson(x, 0.5 * (curr + x / curr), curr);
	}

	__forceinline constexpr static long double getPi() noexcept {
		constexpr const long double pi = 3.14159265358979311599796346854418516159057617187510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313788752886587533208381420617177669147303598253490428755468731159562863882L;
		return pi;
	}

	__forceinline constexpr static long double PiSqur(long double &value)noexcept {

		return sqrtNewtonRaphson(value, value, 0);
	}

	__forceinline constexpr static long double PiSqur(const long double& value)noexcept {

		return sqrtNewtonRaphson(value, value, 0);
	}

	__forceinline constexpr static long double PiPow(const long double ldPow)noexcept {

		return myMath::Pow(getPi(), ldPow);
	}

	__forceinline constexpr static long double multPi(const long double &ldPi)noexcept {

		return getPi() * ldPi;
	}
};